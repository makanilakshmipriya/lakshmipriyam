SRE challenge :

STEP 1: creating and deploying running instance of web server 
To launch an EC2 instance, we have to start by logging in to the AWS management console and navigating to EC2 dashboard.
From there click on Launch Instance to begin the instance process. We have to choose Amazon Machine Image (AMI) like Amazon Linux 2.
Next, we have to select an instance type like t2.micro according to our computing needs. Further we have to Configure instance details like the network and subnet settings, ensuring they align with our network requirements. Additionally, add storage as needed for the  application's data. 


After configuring the instance details, it's crucial to set up security groups to control inbound and outbound traffic. we need to configure the security group to allow only HTTP (port 80) and HTTPS (port 443) traffic. Once the security groups are set, proceed to launch the instance. Next to install and configure Nginx on the newly launched EC2 instance, connect to the instance via SSH using a terminal or SSH client.

To install and configure Nginx on the newly launched EC2 instance, connect to the instance via SSH using a terminal or SSH client. Once connected, update the package repository and install Nginx using the package manager available on the instance's operating system. After installation, start the Nginx service and configure it to serve web content.

To Install Nginx
sudo yum install -y nginx

For starting Nginx service
sudo systemctl start nginx

Enabling Nginx to start on boot
sudo systemctl enable nginx

Web server displays content as below:
Create an HTML file at /lak/share/nginx/html/index.html with the following content:
html
Copy code
<html>
<head>
<title>Hello World</title>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>


Step 2: Securing the Application and Host
We need to Configure SSL/TLS and Redirect HTTP to HTTPS for that we need to do the following

Install an SSL certificate and key. We can create a self-signed certificate using OpenSSL:

sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/mycert.key -out /etc/ssl/certs/mycert.crt
Next Configure Nginx to use the certificate and key by editing /etc/nginx/conf.d/default.conf:

server {
    listen 80;
    server_name _;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name _;

    ssl_certificate /etc/ssl/certs/mycert.crt;
    ssl_certificate_key /etc/ssl/private/mycert.key;

    root /usr/share/nginx/html;
    
    location / {
        index index.html;
    }
}

Now save the configuration and test it with sudo nginx -t.

Then reload Nginx to apply the changes using:
sudo systemctl reload nginx

Allow only Appropriate Ports in the AWS Management Console, navigate to your instance's security group.
So edit the inbound rules to allow only traffic on ports 80 (HTTP) and 443 (HTTPS) and ensure all other ports are blocked to secure the application.


Step 3: Develop and Apply Automated Tests

Writing the Test Cases:
Here we can use framworks like Testinfra or Serverspec to write tests for server configuration.
For example, a test to verify that the Nginx service is running:

def test_nginx_running(host):
    nginx = host.service("nginx")
    assert nginx.is_running
    assert nginx.is_enabled
	
For Run Automated Tests:
Execute the tests using a test runner for example pytest:

# Run the tests with pytest
pytest -v test_server.py

Automate the Deployment:
Integrate the configuration and tests into a CI/CD pipeline using tools like Jenkins, GitLab CI/CD, or GitHub Actions and Automate the deployment and testing process with each code push.

So above steps are the step-by-step procedure that has been followed for creating, deploying, and securing a Nginx web server in AWS to manage and secure your application efficiently.
